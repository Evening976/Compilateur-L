/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class AFonction extends PFonction
{
    private PTypeoptionnel _typeoptionnel_;
    private TId _id_;
    private TParG _parG_;
    private PListedecvar _premier_;
    private TParD _parD_;
    private PListedecvar _second_;
    private PBlocinstructions _blocinstructions_;

    public AFonction()
    {
        // Constructor
    }

    public AFonction(
        @SuppressWarnings("hiding") PTypeoptionnel _typeoptionnel_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TParG _parG_,
        @SuppressWarnings("hiding") PListedecvar _premier_,
        @SuppressWarnings("hiding") TParD _parD_,
        @SuppressWarnings("hiding") PListedecvar _second_,
        @SuppressWarnings("hiding") PBlocinstructions _blocinstructions_)
    {
        // Constructor
        setTypeoptionnel(_typeoptionnel_);

        setId(_id_);

        setParG(_parG_);

        setPremier(_premier_);

        setParD(_parD_);

        setSecond(_second_);

        setBlocinstructions(_blocinstructions_);

    }

    @Override
    public Object clone()
    {
        return new AFonction(
            cloneNode(this._typeoptionnel_),
            cloneNode(this._id_),
            cloneNode(this._parG_),
            cloneNode(this._premier_),
            cloneNode(this._parD_),
            cloneNode(this._second_),
            cloneNode(this._blocinstructions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFonction(this);
    }

    public PTypeoptionnel getTypeoptionnel()
    {
        return this._typeoptionnel_;
    }

    public void setTypeoptionnel(PTypeoptionnel node)
    {
        if(this._typeoptionnel_ != null)
        {
            this._typeoptionnel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeoptionnel_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TParG getParG()
    {
        return this._parG_;
    }

    public void setParG(TParG node)
    {
        if(this._parG_ != null)
        {
            this._parG_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parG_ = node;
    }

    public PListedecvar getPremier()
    {
        return this._premier_;
    }

    public void setPremier(PListedecvar node)
    {
        if(this._premier_ != null)
        {
            this._premier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._premier_ = node;
    }

    public TParD getParD()
    {
        return this._parD_;
    }

    public void setParD(TParD node)
    {
        if(this._parD_ != null)
        {
            this._parD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parD_ = node;
    }

    public PListedecvar getSecond()
    {
        return this._second_;
    }

    public void setSecond(PListedecvar node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public PBlocinstructions getBlocinstructions()
    {
        return this._blocinstructions_;
    }

    public void setBlocinstructions(PBlocinstructions node)
    {
        if(this._blocinstructions_ != null)
        {
            this._blocinstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocinstructions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeoptionnel_)
            + toString(this._id_)
            + toString(this._parG_)
            + toString(this._premier_)
            + toString(this._parD_)
            + toString(this._second_)
            + toString(this._blocinstructions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeoptionnel_ == child)
        {
            this._typeoptionnel_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parG_ == child)
        {
            this._parG_ = null;
            return;
        }

        if(this._premier_ == child)
        {
            this._premier_ = null;
            return;
        }

        if(this._parD_ == child)
        {
            this._parD_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._blocinstructions_ == child)
        {
            this._blocinstructions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeoptionnel_ == oldChild)
        {
            setTypeoptionnel((PTypeoptionnel) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._parG_ == oldChild)
        {
            setParG((TParG) newChild);
            return;
        }

        if(this._premier_ == oldChild)
        {
            setPremier((PListedecvar) newChild);
            return;
        }

        if(this._parD_ == oldChild)
        {
            setParD((TParD) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PListedecvar) newChild);
            return;
        }

        if(this._blocinstructions_ == oldChild)
        {
            setBlocinstructions((PBlocinstructions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
