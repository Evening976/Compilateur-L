/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import java.util.*;
import lParser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getListeDeclarationVar() != null)
        {
            node.getListeDeclarationVar().apply(this);
        }
        if(node.getListeDeclarationFonc() != null)
        {
            node.getListeDeclarationFonc().apply(this);
        }
        outAProgramme(node);
    }

    public void inAListeDeclarationVar(AListeDeclarationVar node)
    {
        defaultIn(node);
    }

    public void outAListeDeclarationVar(AListeDeclarationVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeDeclarationVar(AListeDeclarationVar node)
    {
        inAListeDeclarationVar(node);
        if(node.getDeclarationVar() != null)
        {
            node.getDeclarationVar().apply(this);
        }
        if(node.getListeDeclarationVarPrime() != null)
        {
            node.getListeDeclarationVarPrime().apply(this);
        }
        outAListeDeclarationVar(node);
    }

    public void inAVideListeDeclarationVar(AVideListeDeclarationVar node)
    {
        defaultIn(node);
    }

    public void outAVideListeDeclarationVar(AVideListeDeclarationVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeDeclarationVar(AVideListeDeclarationVar node)
    {
        inAVideListeDeclarationVar(node);
        outAVideListeDeclarationVar(node);
    }

    public void inAListeDeclarationVarPrime(AListeDeclarationVarPrime node)
    {
        defaultIn(node);
    }

    public void outAListeDeclarationVarPrime(AListeDeclarationVarPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeDeclarationVarPrime(AListeDeclarationVarPrime node)
    {
        inAListeDeclarationVarPrime(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getDeclarationVar() != null)
        {
            node.getDeclarationVar().apply(this);
        }
        if(node.getListeDeclarationVarPrime() != null)
        {
            node.getListeDeclarationVarPrime().apply(this);
        }
        outAListeDeclarationVarPrime(node);
    }

    public void inAVideListeDeclarationVarPrime(AVideListeDeclarationVarPrime node)
    {
        defaultIn(node);
    }

    public void outAVideListeDeclarationVarPrime(AVideListeDeclarationVarPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeDeclarationVarPrime(AVideListeDeclarationVarPrime node)
    {
        inAVideListeDeclarationVarPrime(node);
        outAVideListeDeclarationVarPrime(node);
    }

    public void inADeclarationVar(ADeclarationVar node)
    {
        defaultIn(node);
    }

    public void outADeclarationVar(ADeclarationVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationVar(ADeclarationVar node)
    {
        inADeclarationVar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outADeclarationVar(node);
    }

    public void inATableauDeclarationVar(ATableauDeclarationVar node)
    {
        defaultIn(node);
    }

    public void outATableauDeclarationVar(ATableauDeclarationVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauDeclarationVar(ATableauDeclarationVar node)
    {
        inATableauDeclarationVar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCrochetGauche() != null)
        {
            node.getCrochetGauche().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCrochetDroit() != null)
        {
            node.getCrochetDroit().apply(this);
        }
        outATableauDeclarationVar(node);
    }

    public void inAListeDeclarationFonc(AListeDeclarationFonc node)
    {
        defaultIn(node);
    }

    public void outAListeDeclarationFonc(AListeDeclarationFonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeDeclarationFonc(AListeDeclarationFonc node)
    {
        inAListeDeclarationFonc(node);
        if(node.getDeclarationFonc() != null)
        {
            node.getDeclarationFonc().apply(this);
        }
        if(node.getListeDeclarationFonc() != null)
        {
            node.getListeDeclarationFonc().apply(this);
        }
        outAListeDeclarationFonc(node);
    }

    public void inAVideListeDeclarationFonc(AVideListeDeclarationFonc node)
    {
        defaultIn(node);
    }

    public void outAVideListeDeclarationFonc(AVideListeDeclarationFonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeDeclarationFonc(AVideListeDeclarationFonc node)
    {
        inAVideListeDeclarationFonc(node);
        outAVideListeDeclarationFonc(node);
    }

    public void inADeclarationFonc(ADeclarationFonc node)
    {
        defaultIn(node);
    }

    public void outADeclarationFonc(ADeclarationFonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationFonc(ADeclarationFonc node)
    {
        inADeclarationFonc(node);
        if(node.getTypeOptionnel() != null)
        {
            node.getTypeOptionnel().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        if(node.getVarLocale() != null)
        {
            node.getVarLocale().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        outADeclarationFonc(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inATypeTypeOptionnel(ATypeTypeOptionnel node)
    {
        defaultIn(node);
    }

    public void outATypeTypeOptionnel(ATypeTypeOptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeTypeOptionnel(ATypeTypeOptionnel node)
    {
        inATypeTypeOptionnel(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeTypeOptionnel(node);
    }

    public void inAVideTypeOptionnel(AVideTypeOptionnel node)
    {
        defaultIn(node);
    }

    public void outAVideTypeOptionnel(AVideTypeOptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideTypeOptionnel(AVideTypeOptionnel node)
    {
        inAVideTypeOptionnel(node);
        outAVideTypeOptionnel(node);
    }

    public void inABlocInstruction(ABlocInstruction node)
    {
        defaultIn(node);
    }

    public void outABlocInstruction(ABlocInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocInstruction(ABlocInstruction node)
    {
        inABlocInstruction(node);
        if(node.getAccoladeGauche() != null)
        {
            node.getAccoladeGauche().apply(this);
        }
        if(node.getListeInstruction() != null)
        {
            node.getListeInstruction().apply(this);
        }
        if(node.getAccoladeDroite() != null)
        {
            node.getAccoladeDroite().apply(this);
        }
        outABlocInstruction(node);
    }

    public void inAListeInstruction(AListeInstruction node)
    {
        defaultIn(node);
    }

    public void outAListeInstruction(AListeInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeInstruction(AListeInstruction node)
    {
        inAListeInstruction(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        if(node.getListeInstruction() != null)
        {
            node.getListeInstruction().apply(this);
        }
        outAListeInstruction(node);
    }

    public void inAVideListeInstruction(AVideListeInstruction node)
    {
        defaultIn(node);
    }

    public void outAVideListeInstruction(AVideListeInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeInstruction(AVideListeInstruction node)
    {
        inAVideListeInstruction(node);
        outAVideListeInstruction(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPointVirgule() != null)
        {
            node.getPointVirgule().apply(this);
        }
        outAAffectationInstruction(node);
    }

    public void inASiInstruction(ASiInstruction node)
    {
        defaultIn(node);
    }

    public void outASiInstruction(ASiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiInstruction(ASiInstruction node)
    {
        inASiInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        outASiInstruction(node);
    }

    public void inASiSinonInstruction(ASiSinonInstruction node)
    {
        defaultIn(node);
    }

    public void outASiSinonInstruction(ASiSinonInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiSinonInstruction(ASiSinonInstruction node)
    {
        inASiSinonInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getSiInstruction() != null)
        {
            node.getSiInstruction().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getSinonInstruction() != null)
        {
            node.getSinonInstruction().apply(this);
        }
        outASiSinonInstruction(node);
    }

    public void inATantQueInstruction(ATantQueInstruction node)
    {
        defaultIn(node);
    }

    public void outATantQueInstruction(ATantQueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantQueInstruction(ATantQueInstruction node)
    {
        inATantQueInstruction(node);
        if(node.getTantQue() != null)
        {
            node.getTantQue().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        outATantQueInstruction(node);
    }

    public void inARetourInstruction(ARetourInstruction node)
    {
        defaultIn(node);
    }

    public void outARetourInstruction(ARetourInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourInstruction(ARetourInstruction node)
    {
        inARetourInstruction(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPointVirgule() != null)
        {
            node.getPointVirgule().apply(this);
        }
        outARetourInstruction(node);
    }

    public void inAAppelFonctionInstruction(AAppelFonctionInstruction node)
    {
        defaultIn(node);
    }

    public void outAAppelFonctionInstruction(AAppelFonctionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelFonctionInstruction(AAppelFonctionInstruction node)
    {
        inAAppelFonctionInstruction(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getListeExp() != null)
        {
            node.getListeExp().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        if(node.getPointVirgule() != null)
        {
            node.getPointVirgule().apply(this);
        }
        outAAppelFonctionInstruction(node);
    }

    public void inAEcrireInstruction(AEcrireInstruction node)
    {
        defaultIn(node);
    }

    public void outAEcrireInstruction(AEcrireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        inAEcrireInstruction(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        if(node.getPointVirgule() != null)
        {
            node.getPointVirgule().apply(this);
        }
        outAEcrireInstruction(node);
    }

    public void inAFaireTantQueInstruction(AFaireTantQueInstruction node)
    {
        defaultIn(node);
    }

    public void outAFaireTantQueInstruction(AFaireTantQueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFaireTantQueInstruction(AFaireTantQueInstruction node)
    {
        inAFaireTantQueInstruction(node);
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        if(node.getTantQue() != null)
        {
            node.getTantQue().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAFaireTantQueInstruction(node);
    }

    public void inAVar(AVar node)
    {
        defaultIn(node);
    }

    public void outAVar(AVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar(AVar node)
    {
        inAVar(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAVar(node);
    }

    public void inATableauVar(ATableauVar node)
    {
        defaultIn(node);
    }

    public void outATableauVar(ATableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauVar(ATableauVar node)
    {
        inATableauVar(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCrochetGauche() != null)
        {
            node.getCrochetGauche().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getCrochetDroit() != null)
        {
            node.getCrochetDroit().apply(this);
        }
        outATableauVar(node);
    }

    public void inAListeExp(AListeExp node)
    {
        defaultIn(node);
    }

    public void outAListeExp(AListeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeExp(AListeExp node)
    {
        inAListeExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getListeExpPrime() != null)
        {
            node.getListeExpPrime().apply(this);
        }
        outAListeExp(node);
    }

    public void inAVideListeExp(AVideListeExp node)
    {
        defaultIn(node);
    }

    public void outAVideListeExp(AVideListeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeExp(AVideListeExp node)
    {
        inAVideListeExp(node);
        outAVideListeExp(node);
    }

    public void inAListeExpPrime(AListeExpPrime node)
    {
        defaultIn(node);
    }

    public void outAListeExpPrime(AListeExpPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeExpPrime(AListeExpPrime node)
    {
        inAListeExpPrime(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getListeExpPrime() != null)
        {
            node.getListeExpPrime().apply(this);
        }
        outAListeExpPrime(node);
    }

    public void inAVideListeExpPrime(AVideListeExpPrime node)
    {
        defaultIn(node);
    }

    public void outAVideListeExpPrime(AVideListeExpPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeExpPrime(AVideListeExpPrime node)
    {
        inAVideListeExpPrime(node);
        outAVideListeExpPrime(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAOuExp(node);
    }

    public void inAExp1Exp(AExp1Exp node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp(AExp1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        inAExp1Exp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExp1Exp(node);
    }

    public void inAEtExp1(AEtExp1 node)
    {
        defaultIn(node);
    }

    public void outAEtExp1(AEtExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExp1(AEtExp1 node)
    {
        inAEtExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAEtExp1(node);
    }

    public void inAExp2Exp1(AExp2Exp1 node)
    {
        defaultIn(node);
    }

    public void outAExp2Exp1(AExp2Exp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2Exp1(AExp2Exp1 node)
    {
        inAExp2Exp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp2Exp1(node);
    }

    public void inAEgalExp2(AEgalExp2 node)
    {
        defaultIn(node);
    }

    public void outAEgalExp2(AEgalExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalExp2(AEgalExp2 node)
    {
        inAEgalExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAEgalExp2(node);
    }

    public void inAInfExp2(AInfExp2 node)
    {
        defaultIn(node);
    }

    public void outAInfExp2(AInfExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExp2(AInfExp2 node)
    {
        inAInfExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAInfExp2(node);
    }

    public void inAExp3Exp2(AExp3Exp2 node)
    {
        defaultIn(node);
    }

    public void outAExp3Exp2(AExp3Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        inAExp3Exp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp3Exp2(node);
    }

    public void inAPlusExp3(APlusExp3 node)
    {
        defaultIn(node);
    }

    public void outAPlusExp3(APlusExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp3(APlusExp3 node)
    {
        inAPlusExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAPlusExp3(node);
    }

    public void inAMoinsExp3(AMoinsExp3 node)
    {
        defaultIn(node);
    }

    public void outAMoinsExp3(AMoinsExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExp3(AMoinsExp3 node)
    {
        inAMoinsExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAMoinsExp3(node);
    }

    public void inAExp4Exp3(AExp4Exp3 node)
    {
        defaultIn(node);
    }

    public void outAExp4Exp3(AExp4Exp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        inAExp4Exp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp4Exp3(node);
    }

    public void inAMultExp4(AMultExp4 node)
    {
        defaultIn(node);
    }

    public void outAMultExp4(AMultExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp4(AMultExp4 node)
    {
        inAMultExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAMultExp4(node);
    }

    public void inADivExp4(ADivExp4 node)
    {
        defaultIn(node);
    }

    public void outADivExp4(ADivExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp4(ADivExp4 node)
    {
        inADivExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outADivExp4(node);
    }

    public void inAExp5Exp4(AExp5Exp4 node)
    {
        defaultIn(node);
    }

    public void outAExp5Exp4(AExp5Exp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        inAExp5Exp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExp5Exp4(node);
    }

    public void inANonExp5(ANonExp5 node)
    {
        defaultIn(node);
    }

    public void outANonExp5(ANonExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExp5(ANonExp5 node)
    {
        inANonExp5(node);
        if(node.getExclamation() != null)
        {
            node.getExclamation().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outANonExp5(node);
    }

    public void inAExp6Exp5(AExp6Exp5 node)
    {
        defaultIn(node);
    }

    public void outAExp6Exp5(AExp6Exp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        inAExp6Exp5(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outAExp6Exp5(node);
    }

    public void inAPowerExp6(APowerExp6 node)
    {
        defaultIn(node);
    }

    public void outAPowerExp6(APowerExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerExp6(APowerExp6 node)
    {
        inAPowerExp6(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPowerExp6(node);
    }

    public void inAExp7Exp6(AExp7Exp6 node)
    {
        defaultIn(node);
    }

    public void outAExp7Exp6(AExp7Exp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp7Exp6(AExp7Exp6 node)
    {
        inAExp7Exp6(node);
        if(node.getExp7() != null)
        {
            node.getExp7().apply(this);
        }
        outAExp7Exp6(node);
    }

    public void inAEntreParanthesesExp7(AEntreParanthesesExp7 node)
    {
        defaultIn(node);
    }

    public void outAEntreParanthesesExp7(AEntreParanthesesExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntreParanthesesExp7(AEntreParanthesesExp7 node)
    {
        inAEntreParanthesesExp7(node);
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        outAEntreParanthesesExp7(node);
    }

    public void inANombreExp7(ANombreExp7 node)
    {
        defaultIn(node);
    }

    public void outANombreExp7(ANombreExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExp7(ANombreExp7 node)
    {
        inANombreExp7(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExp7(node);
    }

    public void inAVraiExp7(AVraiExp7 node)
    {
        defaultIn(node);
    }

    public void outAVraiExp7(AVraiExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiExp7(AVraiExp7 node)
    {
        inAVraiExp7(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiExp7(node);
    }

    public void inAFauxExp7(AFauxExp7 node)
    {
        defaultIn(node);
    }

    public void outAFauxExp7(AFauxExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxExp7(AFauxExp7 node)
    {
        inAFauxExp7(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxExp7(node);
    }

    public void inAAppelFonctionExp7(AAppelFonctionExp7 node)
    {
        defaultIn(node);
    }

    public void outAAppelFonctionExp7(AAppelFonctionExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelFonctionExp7(AAppelFonctionExp7 node)
    {
        inAAppelFonctionExp7(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getListeExp() != null)
        {
            node.getListeExp().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        outAAppelFonctionExp7(node);
    }

    public void inALireExp7(ALireExp7 node)
    {
        defaultIn(node);
    }

    public void outALireExp7(ALireExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireExp7(ALireExp7 node)
    {
        inALireExp7(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        if(node.getParentheseGauche() != null)
        {
            node.getParentheseGauche().apply(this);
        }
        if(node.getParentheseDroite() != null)
        {
            node.getParentheseDroite().apply(this);
        }
        outALireExp7(node);
    }

    public void inAVariableExp7(AVariableExp7 node)
    {
        defaultIn(node);
    }

    public void outAVariableExp7(AVariableExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExp7(AVariableExp7 node)
    {
        inAVariableExp7(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariableExp7(node);
    }
}
