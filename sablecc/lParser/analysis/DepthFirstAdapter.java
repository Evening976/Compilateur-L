/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import java.util.*;
import lParser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        if(node.getListedecfonc() != null)
        {
            node.getListedecfonc().apply(this);
        }
        outAProgramme(node);
    }

    public void inADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultIn(node);
    }

    public void outADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecvarListedecvar(ADecvarListedecvar node)
    {
        inADecvarListedecvar(node);
        if(node.getDecvar() != null)
        {
            node.getDecvar().apply(this);
        }
        if(node.getListedecvar1() != null)
        {
            node.getListedecvar1().apply(this);
        }
        outADecvarListedecvar(node);
    }

    public void inAVideListedecvar(AVideListedecvar node)
    {
        defaultIn(node);
    }

    public void outAVideListedecvar(AVideListedecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecvar(AVideListedecvar node)
    {
        inAVideListedecvar(node);
        outAVideListedecvar(node);
    }

    public void inARestedecvarListedecvar1(ARestedecvarListedecvar1 node)
    {
        defaultIn(node);
    }

    public void outARestedecvarListedecvar1(ARestedecvarListedecvar1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestedecvarListedecvar1(ARestedecvarListedecvar1 node)
    {
        inARestedecvarListedecvar1(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getDecvar() != null)
        {
            node.getDecvar().apply(this);
        }
        if(node.getListedecvar1() != null)
        {
            node.getListedecvar1().apply(this);
        }
        outARestedecvarListedecvar1(node);
    }

    public void inAVideListedecvar1(AVideListedecvar1 node)
    {
        defaultIn(node);
    }

    public void outAVideListedecvar1(AVideListedecvar1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecvar1(AVideListedecvar1 node)
    {
        inAVideListedecvar1(node);
        outAVideListedecvar1(node);
    }

    public void inAVarsimpleDecvar(AVarsimpleDecvar node)
    {
        defaultIn(node);
    }

    public void outAVarsimpleDecvar(AVarsimpleDecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarsimpleDecvar(AVarsimpleDecvar node)
    {
        inAVarsimpleDecvar(node);
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarsimpleDecvar(node);
    }

    public void inAVartabDecvar(AVartabDecvar node)
    {
        defaultIn(node);
    }

    public void outAVartabDecvar(AVartabDecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVartabDecvar(AVartabDecvar node)
    {
        inAVartabDecvar(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCroG() != null)
        {
            node.getCroG().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCroD() != null)
        {
            node.getCroD().apply(this);
        }
        outAVartabDecvar(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABooleanType(node);
    }

    public void inADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        defaultIn(node);
    }

    public void outADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        inADecfonctionListedecfonc(node);
        if(node.getFonction() != null)
        {
            node.getFonction().apply(this);
        }
        if(node.getListedecfonc() != null)
        {
            node.getListedecfonc().apply(this);
        }
        outADecfonctionListedecfonc(node);
    }

    public void inAVideListedecfonc(AVideListedecfonc node)
    {
        defaultIn(node);
    }

    public void outAVideListedecfonc(AVideListedecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecfonc(AVideListedecfonc node)
    {
        inAVideListedecfonc(node);
        outAVideListedecfonc(node);
    }

    public void inAFonction(AFonction node)
    {
        defaultIn(node);
    }

    public void outAFonction(AFonction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFonction(AFonction node)
    {
        inAFonction(node);
        if(node.getTypeoptionnel() != null)
        {
            node.getTypeoptionnel().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outAFonction(node);
    }

    public void inATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        defaultIn(node);
    }

    public void outATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        inATypevarTypeoptionnel(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypevarTypeoptionnel(node);
    }

    public void inAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        defaultIn(node);
    }

    public void outAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        inAVideTypeoptionnel(node);
        outAVideTypeoptionnel(node);
    }

    public void inABlocBlocinstructions(ABlocBlocinstructions node)
    {
        defaultIn(node);
    }

    public void outABlocBlocinstructions(ABlocBlocinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocBlocinstructions(ABlocBlocinstructions node)
    {
        inABlocBlocinstructions(node);
        if(node.getAccG() != null)
        {
            node.getAccG().apply(this);
        }
        if(node.getListeinstructions() != null)
        {
            node.getListeinstructions().apply(this);
        }
        if(node.getAccD() != null)
        {
            node.getAccD().apply(this);
        }
        outABlocBlocinstructions(node);
    }

    public void inAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        inAInstructionsListeinstructions(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        if(node.getListeinstructions() != null)
        {
            node.getListeinstructions().apply(this);
        }
        outAInstructionsListeinstructions(node);
    }

    public void inAVideListeinstructions(AVideListeinstructions node)
    {
        defaultIn(node);
    }

    public void outAVideListeinstructions(AVideListeinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeinstructions(AVideListeinstructions node)
    {
        inAVideListeinstructions(node);
        outAVideListeinstructions(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        outAAffectationInstruction(node);
    }

    public void inATantqueInstruction(ATantqueInstruction node)
    {
        defaultIn(node);
    }

    public void outATantqueInstruction(ATantqueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueInstruction(ATantqueInstruction node)
    {
        inATantqueInstruction(node);
        if(node.getTq() != null)
        {
            node.getTq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outATantqueInstruction(node);
    }

    public void inASialorsInstruction(ASialorsInstruction node)
    {
        defaultIn(node);
    }

    public void outASialorsInstruction(ASialorsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASialorsInstruction(ASialorsInstruction node)
    {
        inASialorsInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outASialorsInstruction(node);
    }

    public void inASisinonInstruction(ASisinonInstruction node)
    {
        defaultIn(node);
    }

    public void outASisinonInstruction(ASisinonInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASisinonInstruction(ASisinonInstruction node)
    {
        inASisinonInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outASisinonInstruction(node);
    }

    public void inARetourInstruction(ARetourInstruction node)
    {
        defaultIn(node);
    }

    public void outARetourInstruction(ARetourInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourInstruction(ARetourInstruction node)
    {
        inARetourInstruction(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        outARetourInstruction(node);
    }

    public void inAEcrireInstruction(AEcrireInstruction node)
    {
        defaultIn(node);
    }

    public void outAEcrireInstruction(AEcrireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        inAEcrireInstruction(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        outAEcrireInstruction(node);
    }

    public void inAIdInstruction(AIdInstruction node)
    {
        defaultIn(node);
    }

    public void outAIdInstruction(AIdInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdInstruction(AIdInstruction node)
    {
        inAIdInstruction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getListeexpressions() != null)
        {
            node.getListeexpressions().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        outAIdInstruction(node);
    }

    public void inAIdentificateurVar(AIdentificateurVar node)
    {
        defaultIn(node);
    }

    public void outAIdentificateurVar(AIdentificateurVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificateurVar(AIdentificateurVar node)
    {
        inAIdentificateurVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentificateurVar(node);
    }

    public void inACasetableauVar(ACasetableauVar node)
    {
        defaultIn(node);
    }

    public void outACasetableauVar(ACasetableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasetableauVar(ACasetableauVar node)
    {
        inACasetableauVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCroG() != null)
        {
            node.getCroG().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCroD() != null)
        {
            node.getCroD().apply(this);
        }
        outACasetableauVar(node);
    }

    public void inAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        defaultIn(node);
    }

    public void outAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        inAListeparametresListeexpressions(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getListeexpressions1() != null)
        {
            node.getListeexpressions1().apply(this);
        }
        outAListeparametresListeexpressions(node);
    }

    public void inAVideListeexpressions(AVideListeexpressions node)
    {
        defaultIn(node);
    }

    public void outAVideListeexpressions(AVideListeexpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeexpressions(AVideListeexpressions node)
    {
        inAVideListeexpressions(node);
        outAVideListeexpressions(node);
    }

    public void inAResteparametrescommencantvirguleListeexpressions1(AResteparametrescommencantvirguleListeexpressions1 node)
    {
        defaultIn(node);
    }

    public void outAResteparametrescommencantvirguleListeexpressions1(AResteparametrescommencantvirguleListeexpressions1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResteparametrescommencantvirguleListeexpressions1(AResteparametrescommencantvirguleListeexpressions1 node)
    {
        inAResteparametrescommencantvirguleListeexpressions1(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getListeexpressions1() != null)
        {
            node.getListeexpressions1().apply(this);
        }
        outAResteparametrescommencantvirguleListeexpressions1(node);
    }

    public void inAVideListeexpressions1(AVideListeexpressions1 node)
    {
        defaultIn(node);
    }

    public void outAVideListeexpressions1(AVideListeexpressions1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeexpressions1(AVideListeexpressions1 node)
    {
        inAVideListeexpressions1(node);
        outAVideListeexpressions1(node);
    }

    public void inAOuExpression(AOuExpression node)
    {
        defaultIn(node);
    }

    public void outAOuExpression(AOuExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpression(AOuExpression node)
    {
        inAOuExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAOuExpression(node);
    }

    public void inAExpression1Expression(AExpression1Expression node)
    {
        defaultIn(node);
    }

    public void outAExpression1Expression(AExpression1Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression1Expression(AExpression1Expression node)
    {
        inAExpression1Expression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAExpression1Expression(node);
    }

    public void inAEtExpression1(AEtExpression1 node)
    {
        defaultIn(node);
    }

    public void outAEtExpression1(AEtExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExpression1(AEtExpression1 node)
    {
        inAEtExpression1(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAEtExpression1(node);
    }

    public void inAExpression2Expression1(AExpression2Expression1 node)
    {
        defaultIn(node);
    }

    public void outAExpression2Expression1(AExpression2Expression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression2Expression1(AExpression2Expression1 node)
    {
        inAExpression2Expression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAExpression2Expression1(node);
    }

    public void inAEgalExpression2(AEgalExpression2 node)
    {
        defaultIn(node);
    }

    public void outAEgalExpression2(AEgalExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalExpression2(AEgalExpression2 node)
    {
        inAEgalExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAEgalExpression2(node);
    }

    public void inAInfExpression2(AInfExpression2 node)
    {
        defaultIn(node);
    }

    public void outAInfExpression2(AInfExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExpression2(AInfExpression2 node)
    {
        inAInfExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAInfExpression2(node);
    }

    public void inAExpression3Expression2(AExpression3Expression2 node)
    {
        defaultIn(node);
    }

    public void outAExpression3Expression2(AExpression3Expression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression3Expression2(AExpression3Expression2 node)
    {
        inAExpression3Expression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAExpression3Expression2(node);
    }

    public void inAPlusExpression3(APlusExpression3 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression3(APlusExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression3(APlusExpression3 node)
    {
        inAPlusExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAPlusExpression3(node);
    }

    public void inAMoinsExpression3(AMoinsExpression3 node)
    {
        defaultIn(node);
    }

    public void outAMoinsExpression3(AMoinsExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExpression3(AMoinsExpression3 node)
    {
        inAMoinsExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAMoinsExpression3(node);
    }

    public void inAExpression5Expression3(AExpression5Expression3 node)
    {
        defaultIn(node);
    }

    public void outAExpression5Expression3(AExpression5Expression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression5Expression3(AExpression5Expression3 node)
    {
        inAExpression5Expression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAExpression5Expression3(node);
    }

    public void inAMultExpression4(AMultExpression4 node)
    {
        defaultIn(node);
    }

    public void outAMultExpression4(AMultExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression4(AMultExpression4 node)
    {
        inAMultExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAMultExpression4(node);
    }

    public void inADivExpression4(ADivExpression4 node)
    {
        defaultIn(node);
    }

    public void outADivExpression4(ADivExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression4(ADivExpression4 node)
    {
        inADivExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outADivExpression4(node);
    }

    public void inAExpression5Expression4(AExpression5Expression4 node)
    {
        defaultIn(node);
    }

    public void outAExpression5Expression4(AExpression5Expression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression5Expression4(AExpression5Expression4 node)
    {
        inAExpression5Expression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAExpression5Expression4(node);
    }

    public void inANonExpression5(ANonExpression5 node)
    {
        defaultIn(node);
    }

    public void outANonExpression5(ANonExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExpression5(ANonExpression5 node)
    {
        inANonExpression5(node);
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outANonExpression5(node);
    }

    public void inAExpression6Expression5(AExpression6Expression5 node)
    {
        defaultIn(node);
    }

    public void outAExpression6Expression5(AExpression6Expression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression6Expression5(AExpression6Expression5 node)
    {
        inAExpression6Expression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAExpression6Expression5(node);
    }

    public void inAParenthesesExpression6(AParenthesesExpression6 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression6(AParenthesesExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression6(AParenthesesExpression6 node)
    {
        inAParenthesesExpression6(node);
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outAParenthesesExpression6(node);
    }

    public void inAVarExpression6(AVarExpression6 node)
    {
        defaultIn(node);
    }

    public void outAVarExpression6(AVarExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpression6(AVarExpression6 node)
    {
        inAVarExpression6(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpression6(node);
    }

    public void inANombreExpression6(ANombreExpression6 node)
    {
        defaultIn(node);
    }

    public void outANombreExpression6(ANombreExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExpression6(ANombreExpression6 node)
    {
        inANombreExpression6(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExpression6(node);
    }

    public void inAAppelfonction2Expression6(AAppelfonction2Expression6 node)
    {
        defaultIn(node);
    }

    public void outAAppelfonction2Expression6(AAppelfonction2Expression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelfonction2Expression6(AAppelfonction2Expression6 node)
    {
        inAAppelfonction2Expression6(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getListeexpressions() != null)
        {
            node.getListeexpressions().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outAAppelfonction2Expression6(node);
    }

    public void inALireExpression6(ALireExpression6 node)
    {
        defaultIn(node);
    }

    public void outALireExpression6(ALireExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireExpression6(ALireExpression6 node)
    {
        inALireExpression6(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        if(node.getParG() != null)
        {
            node.getParG().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outALireExpression6(node);
    }

    public void inAVraiExpression6(AVraiExpression6 node)
    {
        defaultIn(node);
    }

    public void outAVraiExpression6(AVraiExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiExpression6(AVraiExpression6 node)
    {
        inAVraiExpression6(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiExpression6(node);
    }

    public void inAFauxExpression6(AFauxExpression6 node)
    {
        defaultIn(node);
    }

    public void outAFauxExpression6(AFauxExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxExpression6(AFauxExpression6 node)
    {
        inAFauxExpression6(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxExpression6(node);
    }
}
