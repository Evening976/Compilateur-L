/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import lParser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseADecvarListedecvar(ADecvarListedecvar node);
    void caseAVideListedecvar(AVideListedecvar node);
    void caseARestedecvarListedecvar1(ARestedecvarListedecvar1 node);
    void caseAVideListedecvar1(AVideListedecvar1 node);
    void caseAVarsimpleDecvar(AVarsimpleDecvar node);
    void caseAVartabDecvar(AVartabDecvar node);
    void caseAEntierType(AEntierType node);
    void caseABooleanType(ABooleanType node);
    void caseADecfonctionListedecfonc(ADecfonctionListedecfonc node);
    void caseAVideListedecfonc(AVideListedecfonc node);
    void caseAFonction(AFonction node);
    void caseATypevarTypeoptionnel(ATypevarTypeoptionnel node);
    void caseAVideTypeoptionnel(AVideTypeoptionnel node);
    void caseABlocBlocinstructions(ABlocBlocinstructions node);
    void caseAInstructionsListeinstructions(AInstructionsListeinstructions node);
    void caseAVideListeinstructions(AVideListeinstructions node);
    void caseAAffectationInstruction(AAffectationInstruction node);
    void caseATantqueInstruction(ATantqueInstruction node);
    void caseASialorsInstruction(ASialorsInstruction node);
    void caseASisinonInstruction(ASisinonInstruction node);
    void caseARetourInstruction(ARetourInstruction node);
    void caseAEcrireInstruction(AEcrireInstruction node);
    void caseAIdInstruction(AIdInstruction node);
    void caseAIdentificateurVar(AIdentificateurVar node);
    void caseACasetableauVar(ACasetableauVar node);
    void caseAListeparametresListeexpressions(AListeparametresListeexpressions node);
    void caseAVideListeexpressions(AVideListeexpressions node);
    void caseAResteparametrescommencantvirguleListeexpressions1(AResteparametrescommencantvirguleListeexpressions1 node);
    void caseAVideListeexpressions1(AVideListeexpressions1 node);
    void caseAOuExpression(AOuExpression node);
    void caseAExp1Expression(AExp1Expression node);
    void caseAEtExp1(AEtExp1 node);
    void caseAExp2Exp1(AExp2Exp1 node);
    void caseAEgalExp2(AEgalExp2 node);
    void caseAInfExp2(AInfExp2 node);
    void caseAExp3Exp2(AExp3Exp2 node);
    void caseAPlusExp3(APlusExp3 node);
    void caseAMoinsExp3(AMoinsExp3 node);
    void caseAExp5Exp3(AExp5Exp3 node);
    void caseAMultExp4(AMultExp4 node);
    void caseADivExp4(ADivExp4 node);
    void caseAExp5Exp4(AExp5Exp4 node);
    void caseANonExp5(ANonExp5 node);
    void caseAExp6Exp5(AExp6Exp5 node);
    void caseAParenthesesExp6(AParenthesesExp6 node);
    void caseAVarExp6(AVarExp6 node);
    void caseANombreExp6(ANombreExp6 node);
    void caseAAppelfonction2Exp6(AAppelfonction2Exp6 node);
    void caseALireExp6(ALireExp6 node);
    void caseAVraiExp6(AVraiExp6 node);
    void caseAFauxExp6(AFauxExp6 node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTNombre(TNombre node);
    void caseTDiv(TDiv node);
    void caseTMult(TMult node);
    void caseTMod(TMod node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTNon(TNon node);
    void caseTParG(TParG node);
    void caseTParD(TParD node);
    void caseTEgal(TEgal node);
    void caseTInf(TInf node);
    void caseTAccG(TAccG node);
    void caseTAccD(TAccD node);
    void caseTCroG(TCroG node);
    void caseTCroD(TCroD node);
    void caseTSi(TSi node);
    void caseTTq(TTq node);
    void caseTRetour(TRetour node);
    void caseTAlors(TAlors node);
    void caseTEntier(TEntier node);
    void caseTSinon(TSinon node);
    void caseTBool(TBool node);
    void caseTFaire(TFaire node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTVirgule(TVirgule node);
    void caseTPVirgule(TPVirgule node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
