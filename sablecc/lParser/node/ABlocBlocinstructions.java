/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class ABlocBlocinstructions extends PBlocinstructions
{
    private TAccG _accG_;
    private PListeinstructions _listeinstructions_;
    private TAccD _accD_;

    public ABlocBlocinstructions()
    {
        // Constructor
    }

    public ABlocBlocinstructions(
        @SuppressWarnings("hiding") TAccG _accG_,
        @SuppressWarnings("hiding") PListeinstructions _listeinstructions_,
        @SuppressWarnings("hiding") TAccD _accD_)
    {
        // Constructor
        setAccG(_accG_);

        setListeinstructions(_listeinstructions_);

        setAccD(_accD_);

    }

    @Override
    public Object clone()
    {
        return new ABlocBlocinstructions(
            cloneNode(this._accG_),
            cloneNode(this._listeinstructions_),
            cloneNode(this._accD_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocBlocinstructions(this);
    }

    public TAccG getAccG()
    {
        return this._accG_;
    }

    public void setAccG(TAccG node)
    {
        if(this._accG_ != null)
        {
            this._accG_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accG_ = node;
    }

    public PListeinstructions getListeinstructions()
    {
        return this._listeinstructions_;
    }

    public void setListeinstructions(PListeinstructions node)
    {
        if(this._listeinstructions_ != null)
        {
            this._listeinstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeinstructions_ = node;
    }

    public TAccD getAccD()
    {
        return this._accD_;
    }

    public void setAccD(TAccD node)
    {
        if(this._accD_ != null)
        {
            this._accD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accD_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accG_)
            + toString(this._listeinstructions_)
            + toString(this._accD_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accG_ == child)
        {
            this._accG_ = null;
            return;
        }

        if(this._listeinstructions_ == child)
        {
            this._listeinstructions_ = null;
            return;
        }

        if(this._accD_ == child)
        {
            this._accD_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accG_ == oldChild)
        {
            setAccG((TAccG) newChild);
            return;
        }

        if(this._listeinstructions_ == oldChild)
        {
            setListeinstructions((PListeinstructions) newChild);
            return;
        }

        if(this._accD_ == oldChild)
        {
            setAccD((TAccD) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
