/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class ACasetableauVar extends PVar
{
    private TId _id_;
    private TCroG _croG_;
    private PExpression _expression_;
    private TCroD _croD_;

    public ACasetableauVar()
    {
        // Constructor
    }

    public ACasetableauVar(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TCroG _croG_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TCroD _croD_)
    {
        // Constructor
        setId(_id_);

        setCroG(_croG_);

        setExpression(_expression_);

        setCroD(_croD_);

    }

    @Override
    public Object clone()
    {
        return new ACasetableauVar(
            cloneNode(this._id_),
            cloneNode(this._croG_),
            cloneNode(this._expression_),
            cloneNode(this._croD_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACasetableauVar(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TCroG getCroG()
    {
        return this._croG_;
    }

    public void setCroG(TCroG node)
    {
        if(this._croG_ != null)
        {
            this._croG_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._croG_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TCroD getCroD()
    {
        return this._croD_;
    }

    public void setCroD(TCroD node)
    {
        if(this._croD_ != null)
        {
            this._croD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._croD_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._croG_)
            + toString(this._expression_)
            + toString(this._croD_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._croG_ == child)
        {
            this._croG_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._croD_ == child)
        {
            this._croD_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._croG_ == oldChild)
        {
            setCroG((TCroG) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._croD_ == oldChild)
        {
            setCroD((TCroD) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
