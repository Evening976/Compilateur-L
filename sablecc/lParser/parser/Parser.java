/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.parser;

import lParser.lexer.*;
import lParser.node.*;
import lParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADecvar1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AVide1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ARestedecvarListedecvar1 */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVideListedecvar1 */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AVarsimpleDecvar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AVartabDecvar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AEntierType */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ADecfonctionListedecfonc */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AVideListedecfonc */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ADecvar1$Decvar2$Typevar1Fonction */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ADecvar1$Decvar2$Vide1Fonction */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ADecvar1$Vide2$Typevar1Fonction */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ADecvar1$Vide2$Vide1Fonction */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AVide1$Decvar2$Typevar1Fonction */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AVide1$Decvar2$Vide1Fonction */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AVide1$Vide2$Typevar1Fonction */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AVide1$Vide2$Vide1Fonction */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABlocBlocinstructions */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AInstructionsListeinstructions */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AVideListeinstructions */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ATantqueInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASialorsInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ASisinonInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ARetourInstruction */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AIdInstruction */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AIdentificateurVar */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce ACasetableauVar */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce AListeparametresListeexpressions */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce AVideListeexpressions */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AResteparametrescommencantvirguleListeexpressions1 */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AVideListeexpressions1 */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AOuExpression */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AExp1Expression */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AEtExp1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AEgalExp2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AInfExp2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce APlusExp3 */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AMoinsExp3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AExp5Exp3 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AMultExp4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce ADivExp4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce ANonExp5 */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AExp6Exp5 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AParenthesesExp6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce AVarExp6 */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce ANombreExp6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AAppelfonction2Exp6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list);
            }
            break;
            case 53: /* reduce ALireExp6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce AVraiExp6 */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce AFauxExp6 */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADecvar1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode5;
        {
            // Block
        PDecvar pdecvarNode3;
        PListedecvar1 plistedecvar1Node4;
        pdecvarNode3 = (PDecvar)nodeArrayList1.get(0);
        plistedecvar1Node4 = (PListedecvar1)nodeArrayList2.get(0);

        plistedecvarNode2 = new ADecvarListedecvar(pdecvarNode3, plistedecvar1Node4);
        }
        plistedecfoncNode5 = (PListedecfonc)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(plistedecvarNode2, plistedecfoncNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AVide1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode3;
        {
            // Block

        plistedecvarNode2 = new AVideListedecvar();
        }
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(plistedecvarNode2, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ARestedecvarListedecvar1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar1 plistedecvar1Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDecvar pdecvarNode3;
        PListedecvar1 plistedecvar1Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdecvarNode3 = (PDecvar)nodeArrayList2.get(0);
        plistedecvar1Node4 = (PListedecvar1)nodeArrayList3.get(0);

        plistedecvar1Node1 = new ARestedecvarListedecvar1(tvirguleNode2, pdecvarNode3, plistedecvar1Node4);
        }
	nodeList.add(plistedecvar1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVideListedecvar1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecvar1 plistedecvar1Node1;
        {
            // Block

        plistedecvar1Node1 = new AVideListedecvar1();
        }
	nodeList.add(plistedecvar1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVarsimpleDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdecvarNode1 = new AVarsimpleDecvar(ptypeNode2, tidNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVartabDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TCroG tcrogNode4;
        TNombre tnombreNode5;
        TCroD tcrodNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcrogNode4 = (TCroG)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrodNode6 = (TCroD)nodeArrayList5.get(0);

        pdecvarNode1 = new AVartabDecvar(ptypeNode2, tidNode3, tcrogNode4, tnombreNode5, tcrodNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecfonctionListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        PFonction pfonctionNode2;
        PListedecfonc plistedecfoncNode3;
        pfonctionNode2 = (PFonction)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        plistedecfoncNode1 = new ADecfonctionListedecfonc(pfonctionNode2, plistedecfoncNode3);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVideListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecfonc plistedecfoncNode1;
        {
            // Block

        plistedecfoncNode1 = new AVideListedecfonc();
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADecvar1$Decvar2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode4;
        TParG tpargNode5;
        PListedecvar plistedecvarNode6;
        TParD tpardNode9;
        PListedecvar plistedecvarNode10;
        PBlocinstructions pblocinstructionsNode13;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypeNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tpargNode5 = (TParG)nodeArrayList3.get(0);
        {
            // Block
        PDecvar pdecvarNode7;
        PListedecvar1 plistedecvar1Node8;
        pdecvarNode7 = (PDecvar)nodeArrayList4.get(0);
        plistedecvar1Node8 = (PListedecvar1)nodeArrayList5.get(0);

        plistedecvarNode6 = new ADecvarListedecvar(pdecvarNode7, plistedecvar1Node8);
        }
        tpardNode9 = (TParD)nodeArrayList6.get(0);
        {
            // Block
        PDecvar pdecvarNode11;
        PListedecvar1 plistedecvar1Node12;
        pdecvarNode11 = (PDecvar)nodeArrayList7.get(0);
        plistedecvar1Node12 = (PListedecvar1)nodeArrayList8.get(0);

        plistedecvarNode10 = new ADecvarListedecvar(pdecvarNode11, plistedecvar1Node12);
        }
        pblocinstructionsNode13 = (PBlocinstructions)nodeArrayList9.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode4, tpargNode5, plistedecvarNode6, tpardNode9, plistedecvarNode10, pblocinstructionsNode13);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADecvar1$Decvar2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode3;
        TParG tpargNode4;
        PListedecvar plistedecvarNode5;
        TParD tpardNode8;
        PListedecvar plistedecvarNode9;
        PBlocinstructions pblocinstructionsNode12;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tpargNode4 = (TParG)nodeArrayList2.get(0);
        {
            // Block
        PDecvar pdecvarNode6;
        PListedecvar1 plistedecvar1Node7;
        pdecvarNode6 = (PDecvar)nodeArrayList3.get(0);
        plistedecvar1Node7 = (PListedecvar1)nodeArrayList4.get(0);

        plistedecvarNode5 = new ADecvarListedecvar(pdecvarNode6, plistedecvar1Node7);
        }
        tpardNode8 = (TParD)nodeArrayList5.get(0);
        {
            // Block
        PDecvar pdecvarNode10;
        PListedecvar1 plistedecvar1Node11;
        pdecvarNode10 = (PDecvar)nodeArrayList6.get(0);
        plistedecvar1Node11 = (PListedecvar1)nodeArrayList7.get(0);

        plistedecvarNode9 = new ADecvarListedecvar(pdecvarNode10, plistedecvar1Node11);
        }
        pblocinstructionsNode12 = (PBlocinstructions)nodeArrayList8.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode3, tpargNode4, plistedecvarNode5, tpardNode8, plistedecvarNode9, pblocinstructionsNode12);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADecvar1$Vide2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode4;
        TParG tpargNode5;
        PListedecvar plistedecvarNode6;
        TParD tpardNode9;
        PListedecvar plistedecvarNode10;
        PBlocinstructions pblocinstructionsNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypeNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tpargNode5 = (TParG)nodeArrayList3.get(0);
        {
            // Block
        PDecvar pdecvarNode7;
        PListedecvar1 plistedecvar1Node8;
        pdecvarNode7 = (PDecvar)nodeArrayList4.get(0);
        plistedecvar1Node8 = (PListedecvar1)nodeArrayList5.get(0);

        plistedecvarNode6 = new ADecvarListedecvar(pdecvarNode7, plistedecvar1Node8);
        }
        tpardNode9 = (TParD)nodeArrayList6.get(0);
        {
            // Block

        plistedecvarNode10 = new AVideListedecvar();
        }
        pblocinstructionsNode11 = (PBlocinstructions)nodeArrayList7.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode4, tpargNode5, plistedecvarNode6, tpardNode9, plistedecvarNode10, pblocinstructionsNode11);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADecvar1$Vide2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode3;
        TParG tpargNode4;
        PListedecvar plistedecvarNode5;
        TParD tpardNode8;
        PListedecvar plistedecvarNode9;
        PBlocinstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tpargNode4 = (TParG)nodeArrayList2.get(0);
        {
            // Block
        PDecvar pdecvarNode6;
        PListedecvar1 plistedecvar1Node7;
        pdecvarNode6 = (PDecvar)nodeArrayList3.get(0);
        plistedecvar1Node7 = (PListedecvar1)nodeArrayList4.get(0);

        plistedecvarNode5 = new ADecvarListedecvar(pdecvarNode6, plistedecvar1Node7);
        }
        tpardNode8 = (TParD)nodeArrayList5.get(0);
        {
            // Block

        plistedecvarNode9 = new AVideListedecvar();
        }
        pblocinstructionsNode10 = (PBlocinstructions)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode3, tpargNode4, plistedecvarNode5, tpardNode8, plistedecvarNode9, pblocinstructionsNode10);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVide1$Decvar2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode4;
        TParG tpargNode5;
        PListedecvar plistedecvarNode6;
        TParD tpardNode7;
        PListedecvar plistedecvarNode8;
        PBlocinstructions pblocinstructionsNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypeNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tpargNode5 = (TParG)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode6 = new AVideListedecvar();
        }
        tpardNode7 = (TParD)nodeArrayList4.get(0);
        {
            // Block
        PDecvar pdecvarNode9;
        PListedecvar1 plistedecvar1Node10;
        pdecvarNode9 = (PDecvar)nodeArrayList5.get(0);
        plistedecvar1Node10 = (PListedecvar1)nodeArrayList6.get(0);

        plistedecvarNode8 = new ADecvarListedecvar(pdecvarNode9, plistedecvar1Node10);
        }
        pblocinstructionsNode11 = (PBlocinstructions)nodeArrayList7.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode4, tpargNode5, plistedecvarNode6, tpardNode7, plistedecvarNode8, pblocinstructionsNode11);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVide1$Decvar2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode3;
        TParG tpargNode4;
        PListedecvar plistedecvarNode5;
        TParD tpardNode6;
        PListedecvar plistedecvarNode7;
        PBlocinstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tpargNode4 = (TParG)nodeArrayList2.get(0);
        {
            // Block

        plistedecvarNode5 = new AVideListedecvar();
        }
        tpardNode6 = (TParD)nodeArrayList3.get(0);
        {
            // Block
        PDecvar pdecvarNode8;
        PListedecvar1 plistedecvar1Node9;
        pdecvarNode8 = (PDecvar)nodeArrayList4.get(0);
        plistedecvar1Node9 = (PListedecvar1)nodeArrayList5.get(0);

        plistedecvarNode7 = new ADecvarListedecvar(pdecvarNode8, plistedecvar1Node9);
        }
        pblocinstructionsNode10 = (PBlocinstructions)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode3, tpargNode4, plistedecvarNode5, tpardNode6, plistedecvarNode7, pblocinstructionsNode10);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVide1$Vide2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode4;
        TParG tpargNode5;
        PListedecvar plistedecvarNode6;
        TParD tpardNode7;
        PListedecvar plistedecvarNode8;
        PBlocinstructions pblocinstructionsNode9;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypeNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tpargNode5 = (TParG)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode6 = new AVideListedecvar();
        }
        tpardNode7 = (TParD)nodeArrayList4.get(0);
        {
            // Block

        plistedecvarNode8 = new AVideListedecvar();
        }
        pblocinstructionsNode9 = (PBlocinstructions)nodeArrayList5.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode4, tpargNode5, plistedecvarNode6, tpardNode7, plistedecvarNode8, pblocinstructionsNode9);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVide1$Vide2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TId tidNode3;
        TParG tpargNode4;
        PListedecvar plistedecvarNode5;
        TParD tpardNode6;
        PListedecvar plistedecvarNode7;
        PBlocinstructions pblocinstructionsNode8;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tpargNode4 = (TParG)nodeArrayList2.get(0);
        {
            // Block

        plistedecvarNode5 = new AVideListedecvar();
        }
        tpardNode6 = (TParD)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode7 = new AVideListedecvar();
        }
        pblocinstructionsNode8 = (PBlocinstructions)nodeArrayList4.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidNode3, tpargNode4, plistedecvarNode5, tpardNode6, plistedecvarNode7, pblocinstructionsNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABlocBlocinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocinstructions pblocinstructionsNode1;
        {
            // Block
        TAccG taccgNode2;
        PListeinstructions plisteinstructionsNode3;
        TAccD taccdNode4;
        taccgNode2 = (TAccG)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeinstructions)nodeArrayList2.get(0);
        taccdNode4 = (TAccD)nodeArrayList3.get(0);

        pblocinstructionsNode1 = new ABlocBlocinstructions(taccgNode2, plisteinstructionsNode3, taccdNode4);
        }
	nodeList.add(pblocinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AInstructionsListeinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeinstructions plisteinstructionsNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeinstructions plisteinstructionsNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeinstructions)nodeArrayList2.get(0);

        plisteinstructionsNode1 = new AInstructionsListeinstructions(pinstructionNode2, plisteinstructionsNode3);
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVideListeinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeinstructions plisteinstructionsNode1;
        {
            // Block

        plisteinstructionsNode1 = new AVideListeinstructions();
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpression pexpressionNode4;
        TPVirgule tpvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpvirguleNode5 = (TPVirgule)nodeArrayList4.get(0);

        pinstructionNode1 = new AAffectationInstruction(pvarNode2, tegalNode3, pexpressionNode4, tpvirguleNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ATantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TTq ttqNode2;
        PExpression pexpressionNode3;
        TFaire tfaireNode4;
        PBlocinstructions pblocinstructionsNode5;
        ttqNode2 = (TTq)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ATantqueInstruction(ttqNode2, pexpressionNode3, tfaireNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASialorsInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocinstructions pblocinstructionsNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ASialorsInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASisinonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocinstructions pblocinstructionsNode5;
        TSinon tsinonNode6;
        PBlocinstructions pblocinstructionsNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pblocinstructionsNode7 = (PBlocinstructions)nodeArrayList6.get(0);

        pinstructionNode1 = new ASisinonInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5, tsinonNode6, pblocinstructionsNode7);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpression pexpressionNode3;
        TPVirgule tpvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpvirguleNode4 = (TPVirgule)nodeArrayList3.get(0);

        pinstructionNode1 = new ARetourInstruction(tretourNode2, pexpressionNode3, tpvirguleNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParG tpargNode3;
        PExpression pexpressionNode4;
        TParD tpardNode5;
        TPVirgule tpvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tpargNode3 = (TParG)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tpvirguleNode6 = (TPVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AEcrireInstruction(tecrireNode2, tpargNode3, pexpressionNode4, tpardNode5, tpvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TId tidNode2;
        TParG tpargNode3;
        PListeexpressions plisteexpressionsNode4;
        TParD tpardNode5;
        TPVirgule tpvirguleNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpargNode3 = (TParG)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeexpressions)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tpvirguleNode6 = (TPVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AIdInstruction(tidNode2, tpargNode3, plisteexpressionsNode4, tpardNode5, tpvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIdentificateurVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificateurVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACasetableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TCroG tcrogNode3;
        PExpression pexpressionNode4;
        TCroD tcrodNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcrogNode3 = (TCroG)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcrodNode5 = (TCroD)nodeArrayList4.get(0);

        pvarNode1 = new ACasetableauVar(tidNode2, tcrogNode3, pexpressionNode4, tcrodNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AListeparametresListeexpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpressions plisteexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PListeexpressions1 plisteexpressions1Node3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        plisteexpressions1Node3 = (PListeexpressions1)nodeArrayList2.get(0);

        plisteexpressionsNode1 = new AListeparametresListeexpressions(pexpressionNode2, plisteexpressions1Node3);
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AVideListeexpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeexpressions plisteexpressionsNode1;
        {
            // Block

        plisteexpressionsNode1 = new AVideListeexpressions();
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AResteparametrescommencantvirguleListeexpressions1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpressions1 plisteexpressions1Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        PListeexpressions1 plisteexpressions1Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        plisteexpressions1Node4 = (PListeexpressions1)nodeArrayList3.get(0);

        plisteexpressions1Node1 = new AResteparametrescommencantvirguleListeexpressions1(tvirguleNode2, pexpressionNode3, plisteexpressions1Node4);
        }
	nodeList.add(plisteexpressions1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVideListeexpressions1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeexpressions1 plisteexpressions1Node1;
        {
            // Block

        plisteexpressions1Node1 = new AVideListeexpressions1();
        }
	nodeList.add(plisteexpressions1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AOuExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOu touNode3;
        PExp1 pexp1Node4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpressionNode1 = new AOuExpression(pexpressionNode2, touNode3, pexp1Node4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExp1Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpressionNode1 = new AExp1Expression(pexp1Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEtExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TEt tetNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new AEtExp1(pexp1Node2, tetNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp2Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEgalExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TEgal tegalNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AEgalExp2(pexp2Node2, tegalNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AInfExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TInf tinfNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AInfExp2(pexp2Node2, tinfNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APlusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new APlusExp3(pexp3Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMoinsExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TMoins tmoinsNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new AMoinsExp3(pexp3Node2, tmoinsNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExp5Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp5Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TMult tmultNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new AMultExp4(pexp4Node2, tmultNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADivExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TDiv tdivNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new ADivExp4(pexp4Node2, tdivNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANonExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TNon tnonNode2;
        PExp5 pexp5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexp5Node3 = (PExp5)nodeArrayList2.get(0);

        pexp5Node1 = new ANonExp5(tnonNode2, pexp5Node3);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExp6Exp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);

        pexp5Node1 = new AExp6Exp5(pexp6Node2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AParenthesesExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TParG tpargNode2;
        PExpression pexpressionNode3;
        TParD tpardNode4;
        tpargNode2 = (TParG)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpardNode4 = (TParD)nodeArrayList3.get(0);

        pexp6Node1 = new AParenthesesExp6(tpargNode2, pexpressionNode3, tpardNode4);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AVarExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp6Node1 = new AVarExp6(pvarNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANombreExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexp6Node1 = new ANombreExp6(tnombreNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAppelfonction2Exp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TId tidNode2;
        TParG tpargNode3;
        PListeexpressions plisteexpressionsNode4;
        TParD tpardNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpargNode3 = (TParG)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeexpressions)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);

        pexp6Node1 = new AAppelfonction2Exp6(tidNode2, tpargNode3, plisteexpressionsNode4, tpardNode5);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ALireExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TLire tlireNode2;
        TParG tpargNode3;
        TParD tpardNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tpargNode3 = (TParG)nodeArrayList2.get(0);
        tpardNode4 = (TParD)nodeArrayList3.get(0);

        pexp6Node1 = new ALireExp6(tlireNode2, tpargNode3, tpardNode4);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVraiExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexp6Node1 = new AVraiExp6(tvraiNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AFauxExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexp6Node1 = new AFauxExp6(tfauxNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 9}, {21, SHIFT, 1}, {23, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 3}, {9, SHIFT, 9}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, ERROR, 6}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 9}, {21, SHIFT, 1}, {23, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, ERROR, 9}, {10, SHIFT, 15}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, ERROR, 10}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, REDUCE, 9}, {21, SHIFT, 1}, {23, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 4}, {9, SHIFT, 20}, {15, SHIFT, 21}, },
			{{-1, ERROR, 13}, {31, SHIFT, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 15}, {13, SHIFT, 23}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, ERROR, 17}, {31, SHIFT, 27}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {10, SHIFT, 29}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, ERROR, 21}, {2, SHIFT, 31}, },
			{{-1, ERROR, 22}, {9, SHIFT, 20}, },
			{{-1, REDUCE, 20}, {17, SHIFT, 32}, {18, SHIFT, 33}, {19, SHIFT, 34}, {26, SHIFT, 35}, {31, SHIFT, 36}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 26}, {10, SHIFT, 41}, },
			{{-1, REDUCE, 4}, {15, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 29}, {13, SHIFT, 23}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, ERROR, 31}, {16, SHIFT, 45}, },
			{{-1, ERROR, 32}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 33}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 34}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 35}, {9, SHIFT, 63}, },
			{{-1, REDUCE, 28}, {9, SHIFT, 64}, {15, SHIFT, 65}, },
			{{-1, ERROR, 37}, {14, SHIFT, 66}, },
			{{-1, REDUCE, 20}, {17, SHIFT, 32}, {18, SHIFT, 33}, {19, SHIFT, 34}, {26, SHIFT, 35}, {31, SHIFT, 36}, },
			{{-1, ERROR, 39}, {11, SHIFT, 68}, },
			{{-1, ERROR, 40}, {13, SHIFT, 23}, },
			{{-1, ERROR, 41}, {13, SHIFT, 23}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 44}, {10, SHIFT, 73}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 47}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 48}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 49}, {9, SHIFT, 76}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 28}, {9, SHIFT, 77}, {15, SHIFT, 65}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 54}, {7, SHIFT, 78}, {20, SHIFT, 79}, },
			{{-1, REDUCE, 35}, {6, SHIFT, 80}, },
			{{-1, REDUCE, 37}, {11, SHIFT, 81}, {12, SHIFT, 82}, },
			{{-1, REDUCE, 40}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 43}, {3, SHIFT, 85}, {4, SHIFT, 86}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 61}, {7, SHIFT, 78}, {24, SHIFT, 87}, },
			{{-1, ERROR, 62}, {7, SHIFT, 78}, {28, SHIFT, 88}, },
			{{-1, ERROR, 63}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 65}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 68}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 72}, {13, SHIFT, 23}, },
			{{-1, ERROR, 73}, {13, SHIFT, 23}, {21, SHIFT, 1}, {23, SHIFT, 2}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 75}, {7, SHIFT, 78}, {10, SHIFT, 98}, },
			{{-1, ERROR, 76}, {10, SHIFT, 99}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 78}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 79}, {13, SHIFT, 23}, },
			{{-1, ERROR, 80}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 81}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 82}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 83}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 84}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 85}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 86}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, ERROR, 87}, {13, SHIFT, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 89}, {7, SHIFT, 78}, {10, SHIFT, 111}, },
			{{-1, ERROR, 90}, {10, SHIFT, 112}, },
			{{-1, REDUCE, 33}, {7, SHIFT, 78}, {27, SHIFT, 113}, },
			{{-1, ERROR, 92}, {7, SHIFT, 78}, {16, SHIFT, 115}, },
			{{-1, ERROR, 93}, {7, SHIFT, 78}, {28, SHIFT, 116}, },
			{{-1, ERROR, 94}, {13, SHIFT, 23}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 100}, {10, SHIFT, 119}, },
			{{-1, REDUCE, 34}, {6, SHIFT, 80}, },
			{{-1, REDUCE, 23}, {22, SHIFT, 120}, },
			{{-1, REDUCE, 36}, {11, SHIFT, 81}, {12, SHIFT, 82}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 41}, {3, SHIFT, 85}, {4, SHIFT, 86}, },
			{{-1, REDUCE, 42}, {3, SHIFT, 85}, {4, SHIFT, 86}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 111}, {28, SHIFT, 121}, },
			{{-1, ERROR, 112}, {28, SHIFT, 122}, },
			{{-1, ERROR, 113}, {2, SHIFT, 46}, {8, SHIFT, 47}, {9, SHIFT, 48}, {25, SHIFT, 49}, {29, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 118}, {13, SHIFT, 23}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 120}, {13, SHIFT, 23}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 33}, {7, SHIFT, 78}, {27, SHIFT, 113}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 32}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 11}, {16, 26}, {18, 28}, {24, 40}, {30, 44}, {42, 72}, {70, 94}, {96, 118}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 24}, {20, 30}, {29, 42}, {41, 70}, {73, 96}, },
			{{-1, 17}, {0, 6}, {8, 13}, {11, 13}, },
			{{-1, 7}, {8, 14}, {11, 19}, },
			{{-1, 8}, },
			{{-1, 25}, {29, 43}, {40, 69}, {41, 71}, {72, 95}, {73, 97}, {79, 102}, {87, 110}, {94, 117}, {118, 124}, {120, 125}, },
			{{-1, 37}, {38, 67}, },
			{{-1, 38}, },
			{{-1, 53}, {23, 39}, {38, 39}, },
			{{-1, 90}, {77, 100}, },
			{{-1, 114}, {123, 126}, },
			{{-1, 91}, {32, 54}, {33, 61}, {34, 62}, {48, 75}, {63, 89}, {65, 92}, {68, 93}, {113, 123}, },
			{{-1, 55}, {78, 101}, },
			{{-1, 56}, {80, 103}, },
			{{-1, 57}, {81, 104}, {82, 105}, },
			{{-1, 58}, {83, 106}, {84, 107}, },
			{{-1, 59}, {47, 74}, {85, 108}, {86, 109}, },
			{{-1, 60}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'bool', id, EOF",
			"expecting: id",
			"expecting: '('",
			"expecting: EOF",
			"expecting: 'entier', 'bool', ',', id, EOF",
			"expecting: ')', 'entier', 'bool'",
			"expecting: 'entier', 'bool'",
			"expecting: '(', '[', 'entier', 'bool', ',', id, EOF",
			"expecting: '{', 'entier', 'bool'",
			"expecting: ')', ','",
			"expecting: ')', '{', 'entier', 'bool', ',', id, EOF",
			"expecting: nombre",
			"expecting: '}', 'si', 'tantque', 'retour', 'ecrire', id",
			"expecting: '{', ','",
			"expecting: ')'",
			"expecting: ')', '{', '[', 'entier', 'bool', ',', id, EOF",
			"expecting: ')', '{', 'entier', 'bool', id, EOF",
			"expecting: ']'",
			"expecting: nombre, '!', '(', 'lire', 'vrai', 'faux', id",
			"expecting: '(', '=', '['",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '{'",
			"expecting: '+', '-', '/', '*', '&', '|', ')', '=', '<', ']', 'alors', 'faire', ',', ';'",
			"expecting: '+', '-', '/', '*', '&', '|', '(', ')', '=', '<', '[', ']', 'alors', 'faire', ',', ';'",
			"expecting: '|', 'alors'",
			"expecting: '&', '|', ')', ']', 'alors', 'faire', ',', ';'",
			"expecting: '&', '|', ')', '=', '<', ']', 'alors', 'faire', ',', ';'",
			"expecting: '+', '-', '&', '|', ')', '=', '<', ']', 'alors', 'faire', ',', ';'",
			"expecting: '|', 'faire'",
			"expecting: '|', ';'",
			"expecting: nombre, '!', '(', ')', 'lire', 'vrai', 'faux', id",
			"expecting: '}', 'si', 'tantque', 'retour', 'entier', 'sinon', 'bool', 'ecrire', id, EOF",
			"expecting: '|', ')'",
			"expecting: '|', ')', ','",
			"expecting: '|', ']'",
			"expecting: '}', 'si', 'tantque', 'retour', 'sinon', 'ecrire', id",
			"expecting: ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 1, 3, 0, 5, 6, 0, 7, 1, 3, 8, 9, 1, 10, 3, 5, 11, 2, 12, 13, 0, 14, 15, 16, 8, 9, 17, 18, 18, 18, 2, 19, 20, 12, 21, 22, 8, 13, 0, 14, 10, 23, 18, 18, 2, 23, 23, 24, 23, 25, 26, 27, 28, 23, 23, 23, 29, 30, 18, 31, 18, 32, 20, 18, 0, 13, 0, 22, 8, 23, 33, 14, 31, 18, 22, 18, 18, 18, 18, 18, 18, 18, 22, 12, 33, 14, 34, 35, 30, 22, 0, 13, 0, 23, 23, 14, 26, 36, 27, 28, 28, 23, 23, 23, 23, 12, 37, 37, 18, 14, 23, 12, 0, 22, 23, 22, 12, 12, 34, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
