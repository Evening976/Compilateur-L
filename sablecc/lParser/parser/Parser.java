/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.parser;

import lParser.lexer.*;
import lParser.node.*;
import lParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce A1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AVide1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AListeDeclarationVarPrime */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVideListeDeclarationVarPrime */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ADeclarationVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ATableauDeclarationVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AListeDeclarationFonc */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AVideListeDeclarationFonc */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce A1$2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce A1$2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce A1$Vide2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce A1$Vide2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AVide1$2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AVide1$2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AVide1$Vide2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AVide1$Vide2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce ABoolType */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AEntierType */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABlocInstruction */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AListeInstruction */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AVideListeInstruction */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ASiInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASiSinonInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ATantQueInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ARetourInstruction */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAppelFonctionInstruction */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AFaireTantQueInstruction */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AVar */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce ATableauVar */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list);
            }
            break;
            case 31: /* reduce AListeExp */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AVideListeExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce AListeExpPrime */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AVideListeExpPrime */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AOuExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AExp1Exp */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list);
            }
            break;
            case 37: /* reduce AEtExp1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AEgalExp2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AInfExp2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce APlusExp3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AMoinsExp3 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AExp4Exp3 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AMultExp4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce ADivExp4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce ANonExp5 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AExp6Exp5 */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce APowerExp6 */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AExp7Exp6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AEntreParanthesesExp7 */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce ANombreExp7 */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce AVraiExp7 */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce AFauxExp7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce AAppelFonctionExp7 */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce ALireExp7 */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce AVariableExp7 */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce A1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListeDeclarationVar plistedeclarationvarNode2;
        PListeDeclarationFonc plistedeclarationfoncNode5;
        {
            // Block
        PDeclarationVar pdeclarationvarNode3;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode4;
        pdeclarationvarNode3 = (PDeclarationVar)nodeArrayList1.get(0);
        plistedeclarationvarprimeNode4 = (PListeDeclarationVarPrime)nodeArrayList2.get(0);

        plistedeclarationvarNode2 = new AListeDeclarationVar(pdeclarationvarNode3, plistedeclarationvarprimeNode4);
        }
        plistedeclarationfoncNode5 = (PListeDeclarationFonc)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(plistedeclarationvarNode2, plistedeclarationfoncNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AVide1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListeDeclarationVar plistedeclarationvarNode2;
        PListeDeclarationFonc plistedeclarationfoncNode3;
        {
            // Block

        plistedeclarationvarNode2 = new AVideListeDeclarationVar();
        }
        plistedeclarationfoncNode3 = (PListeDeclarationFonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(plistedeclarationvarNode2, plistedeclarationfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListeDeclarationVarPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeDeclarationVarPrime plistedeclarationvarprimeNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDeclarationVar pdeclarationvarNode3;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdeclarationvarNode3 = (PDeclarationVar)nodeArrayList2.get(0);
        plistedeclarationvarprimeNode4 = (PListeDeclarationVarPrime)nodeArrayList3.get(0);

        plistedeclarationvarprimeNode1 = new AListeDeclarationVarPrime(tvirguleNode2, pdeclarationvarNode3, plistedeclarationvarprimeNode4);
        }
	nodeList.add(plistedeclarationvarprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVideListeDeclarationVarPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeDeclarationVarPrime plistedeclarationvarprimeNode1;
        {
            // Block

        plistedeclarationvarprimeNode1 = new AVideListeDeclarationVarPrime();
        }
	nodeList.add(plistedeclarationvarprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVar pdeclarationvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdeclarationvarNode1 = new ADeclarationVar(ptypeNode2, tidentifNode3);
        }
	nodeList.add(pdeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATableauDeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVar pdeclarationvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TCrochetGauche tcrochetgaucheNode4;
        TNombre tnombreNode5;
        TCrochetDroit tcrochetdroitNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcrochetgaucheNode4 = (TCrochetGauche)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochetdroitNode6 = (TCrochetDroit)nodeArrayList5.get(0);

        pdeclarationvarNode1 = new ATableauDeclarationVar(ptypeNode2, tidentifNode3, tcrochetgaucheNode4, tnombreNode5, tcrochetdroitNode6);
        }
	nodeList.add(pdeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListeDeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeDeclarationFonc plistedeclarationfoncNode1;
        {
            // Block
        PDeclarationFonc pdeclarationfoncNode2;
        PListeDeclarationFonc plistedeclarationfoncNode3;
        pdeclarationfoncNode2 = (PDeclarationFonc)nodeArrayList1.get(0);
        plistedeclarationfoncNode3 = (PListeDeclarationFonc)nodeArrayList2.get(0);

        plistedeclarationfoncNode1 = new AListeDeclarationFonc(pdeclarationfoncNode2, plistedeclarationfoncNode3);
        }
	nodeList.add(plistedeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVideListeDeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeDeclarationFonc plistedeclarationfoncNode1;
        {
            // Block

        plistedeclarationfoncNode1 = new AVideListeDeclarationFonc();
        }
	nodeList.add(plistedeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce A1$2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeDeclarationVar plistedeclarationvarNode6;
        TParentheseDroite tparenthesedroiteNode9;
        PListeDeclarationVar plistedeclarationvarNode10;
        PBlocInstruction pblocinstructionNode13;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode7;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode8;
        pdeclarationvarNode7 = (PDeclarationVar)nodeArrayList4.get(0);
        plistedeclarationvarprimeNode8 = (PListeDeclarationVarPrime)nodeArrayList5.get(0);

        plistedeclarationvarNode6 = new AListeDeclarationVar(pdeclarationvarNode7, plistedeclarationvarprimeNode8);
        }
        tparenthesedroiteNode9 = (TParentheseDroite)nodeArrayList6.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode11;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode12;
        pdeclarationvarNode11 = (PDeclarationVar)nodeArrayList7.get(0);
        plistedeclarationvarprimeNode12 = (PListeDeclarationVarPrime)nodeArrayList8.get(0);

        plistedeclarationvarNode10 = new AListeDeclarationVar(pdeclarationvarNode11, plistedeclarationvarprimeNode12);
        }
        pblocinstructionNode13 = (PBlocInstruction)nodeArrayList9.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistedeclarationvarNode6, tparenthesedroiteNode9, plistedeclarationvarNode10, pblocinstructionNode13);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce A1$2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeDeclarationVar plistedeclarationvarNode5;
        TParentheseDroite tparenthesedroiteNode8;
        PListeDeclarationVar plistedeclarationvarNode9;
        PBlocInstruction pblocinstructionNode12;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode6;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode7;
        pdeclarationvarNode6 = (PDeclarationVar)nodeArrayList3.get(0);
        plistedeclarationvarprimeNode7 = (PListeDeclarationVarPrime)nodeArrayList4.get(0);

        plistedeclarationvarNode5 = new AListeDeclarationVar(pdeclarationvarNode6, plistedeclarationvarprimeNode7);
        }
        tparenthesedroiteNode8 = (TParentheseDroite)nodeArrayList5.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode10;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode11;
        pdeclarationvarNode10 = (PDeclarationVar)nodeArrayList6.get(0);
        plistedeclarationvarprimeNode11 = (PListeDeclarationVarPrime)nodeArrayList7.get(0);

        plistedeclarationvarNode9 = new AListeDeclarationVar(pdeclarationvarNode10, plistedeclarationvarprimeNode11);
        }
        pblocinstructionNode12 = (PBlocInstruction)nodeArrayList8.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistedeclarationvarNode5, tparenthesedroiteNode8, plistedeclarationvarNode9, pblocinstructionNode12);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce A1$Vide2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeDeclarationVar plistedeclarationvarNode6;
        TParentheseDroite tparenthesedroiteNode9;
        PListeDeclarationVar plistedeclarationvarNode10;
        PBlocInstruction pblocinstructionNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode7;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode8;
        pdeclarationvarNode7 = (PDeclarationVar)nodeArrayList4.get(0);
        plistedeclarationvarprimeNode8 = (PListeDeclarationVarPrime)nodeArrayList5.get(0);

        plistedeclarationvarNode6 = new AListeDeclarationVar(pdeclarationvarNode7, plistedeclarationvarprimeNode8);
        }
        tparenthesedroiteNode9 = (TParentheseDroite)nodeArrayList6.get(0);
        {
            // Block

        plistedeclarationvarNode10 = new AVideListeDeclarationVar();
        }
        pblocinstructionNode11 = (PBlocInstruction)nodeArrayList7.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistedeclarationvarNode6, tparenthesedroiteNode9, plistedeclarationvarNode10, pblocinstructionNode11);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce A1$Vide2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeDeclarationVar plistedeclarationvarNode5;
        TParentheseDroite tparenthesedroiteNode8;
        PListeDeclarationVar plistedeclarationvarNode9;
        PBlocInstruction pblocinstructionNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode6;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode7;
        pdeclarationvarNode6 = (PDeclarationVar)nodeArrayList3.get(0);
        plistedeclarationvarprimeNode7 = (PListeDeclarationVarPrime)nodeArrayList4.get(0);

        plistedeclarationvarNode5 = new AListeDeclarationVar(pdeclarationvarNode6, plistedeclarationvarprimeNode7);
        }
        tparenthesedroiteNode8 = (TParentheseDroite)nodeArrayList5.get(0);
        {
            // Block

        plistedeclarationvarNode9 = new AVideListeDeclarationVar();
        }
        pblocinstructionNode10 = (PBlocInstruction)nodeArrayList6.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistedeclarationvarNode5, tparenthesedroiteNode8, plistedeclarationvarNode9, pblocinstructionNode10);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVide1$2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeDeclarationVar plistedeclarationvarNode6;
        TParentheseDroite tparenthesedroiteNode7;
        PListeDeclarationVar plistedeclarationvarNode8;
        PBlocInstruction pblocinstructionNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block

        plistedeclarationvarNode6 = new AVideListeDeclarationVar();
        }
        tparenthesedroiteNode7 = (TParentheseDroite)nodeArrayList4.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode9;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode10;
        pdeclarationvarNode9 = (PDeclarationVar)nodeArrayList5.get(0);
        plistedeclarationvarprimeNode10 = (PListeDeclarationVarPrime)nodeArrayList6.get(0);

        plistedeclarationvarNode8 = new AListeDeclarationVar(pdeclarationvarNode9, plistedeclarationvarprimeNode10);
        }
        pblocinstructionNode11 = (PBlocInstruction)nodeArrayList7.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistedeclarationvarNode6, tparenthesedroiteNode7, plistedeclarationvarNode8, pblocinstructionNode11);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVide1$2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeDeclarationVar plistedeclarationvarNode5;
        TParentheseDroite tparenthesedroiteNode6;
        PListeDeclarationVar plistedeclarationvarNode7;
        PBlocInstruction pblocinstructionNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block

        plistedeclarationvarNode5 = new AVideListeDeclarationVar();
        }
        tparenthesedroiteNode6 = (TParentheseDroite)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode8;
        PListeDeclarationVarPrime plistedeclarationvarprimeNode9;
        pdeclarationvarNode8 = (PDeclarationVar)nodeArrayList4.get(0);
        plistedeclarationvarprimeNode9 = (PListeDeclarationVarPrime)nodeArrayList5.get(0);

        plistedeclarationvarNode7 = new AListeDeclarationVar(pdeclarationvarNode8, plistedeclarationvarprimeNode9);
        }
        pblocinstructionNode10 = (PBlocInstruction)nodeArrayList6.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistedeclarationvarNode5, tparenthesedroiteNode6, plistedeclarationvarNode7, pblocinstructionNode10);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVide1$Vide2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeDeclarationVar plistedeclarationvarNode6;
        TParentheseDroite tparenthesedroiteNode7;
        PListeDeclarationVar plistedeclarationvarNode8;
        PBlocInstruction pblocinstructionNode9;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block

        plistedeclarationvarNode6 = new AVideListeDeclarationVar();
        }
        tparenthesedroiteNode7 = (TParentheseDroite)nodeArrayList4.get(0);
        {
            // Block

        plistedeclarationvarNode8 = new AVideListeDeclarationVar();
        }
        pblocinstructionNode9 = (PBlocInstruction)nodeArrayList5.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistedeclarationvarNode6, tparenthesedroiteNode7, plistedeclarationvarNode8, pblocinstructionNode9);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVide1$Vide2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeDeclarationVar plistedeclarationvarNode5;
        TParentheseDroite tparenthesedroiteNode6;
        PListeDeclarationVar plistedeclarationvarNode7;
        PBlocInstruction pblocinstructionNode8;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block

        plistedeclarationvarNode5 = new AVideListeDeclarationVar();
        }
        tparenthesedroiteNode6 = (TParentheseDroite)nodeArrayList3.get(0);
        {
            // Block

        plistedeclarationvarNode7 = new AVideListeDeclarationVar();
        }
        pblocinstructionNode8 = (PBlocInstruction)nodeArrayList4.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistedeclarationvarNode5, tparenthesedroiteNode6, plistedeclarationvarNode7, pblocinstructionNode8);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABlocInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocInstruction pblocinstructionNode1;
        {
            // Block
        TAccoladeGauche taccoladegaucheNode2;
        PListeInstruction plisteinstructionNode3;
        TAccoladeDroite taccoladedroiteNode4;
        taccoladegaucheNode2 = (TAccoladeGauche)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);
        taccoladedroiteNode4 = (TAccoladeDroite)nodeArrayList3.get(0);

        pblocinstructionNode1 = new ABlocInstruction(taccoladegaucheNode2, plisteinstructionNode3, taccoladedroiteNode4);
        }
	nodeList.add(pblocinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeInstruction plisteinstructionNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeInstruction plisteinstructionNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);

        plisteinstructionNode1 = new AListeInstruction(pinstructionNode2, plisteinstructionNode3);
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVideListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeInstruction plisteinstructionNode1;
        {
            // Block

        plisteinstructionNode1 = new AVideListeInstruction();
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExp pexpNode4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        pinstructionNode1 = new AAffectationInstruction(pvarNode2, tegalNode3, pexpNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PBlocInstruction pblocinstructionNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);

        pinstructionNode1 = new ASiInstruction(tsiNode2, pexpNode3, talorsNode4, pblocinstructionNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASiSinonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PBlocInstruction pblocinstructionNode5;
        TSinon tsinonNode6;
        PBlocInstruction pblocinstructionNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pblocinstructionNode7 = (PBlocInstruction)nodeArrayList6.get(0);

        pinstructionNode1 = new ASiSinonInstruction(tsiNode2, pexpNode3, talorsNode4, pblocinstructionNode5, tsinonNode6, pblocinstructionNode7);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATantQueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TTantQue ttantqueNode2;
        PExp pexpNode3;
        TFaire tfaireNode4;
        PBlocInstruction pblocinstructionNode5;
        ttantqueNode2 = (TTantQue)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);

        pinstructionNode1 = new ATantQueInstruction(ttantqueNode2, pexpNode3, tfaireNode4, pblocinstructionNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TRetour tretourNode2;
        PExp pexpNode3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        pinstructionNode1 = new ARetourInstruction(tretourNode2, pexpNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAppelFonctionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PListeExp plisteexpNode4;
        TParentheseDroite tparenthesedroiteNode5;
        TPointVirgule tpointvirguleNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        plisteexpNode4 = (PListeExp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AAppelFonctionInstruction(tidentifNode2, tparenthesegaucheNode3, plisteexpNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PExp pexpNode4;
        TParentheseDroite tparenthesedroiteNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AEcrireInstruction(tecrireNode2, tparenthesegaucheNode3, pexpNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFaireTantQueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TFaire tfaireNode2;
        PBlocInstruction pblocinstructionNode3;
        TTantQue ttantqueNode4;
        PExp pexpNode5;
        tfaireNode2 = (TFaire)nodeArrayList1.get(0);
        pblocinstructionNode3 = (PBlocInstruction)nodeArrayList2.get(0);
        ttantqueNode4 = (TTantQue)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);

        pinstructionNode1 = new AFaireTantQueInstruction(tfaireNode2, pblocinstructionNode3, ttantqueNode4, pexpNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCrochetGauche tcrochetgaucheNode3;
        PExp pexpNode4;
        TCrochetDroit tcrochetdroitNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcrochetgaucheNode3 = (TCrochetGauche)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcrochetdroitNode5 = (TCrochetDroit)nodeArrayList4.get(0);

        pvarNode1 = new ATableauVar(tidentifNode2, tcrochetgaucheNode3, pexpNode4, tcrochetdroitNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AListeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExp plisteexpNode1;
        {
            // Block
        PExp pexpNode2;
        PListeExpPrime plisteexpprimeNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plisteexpprimeNode3 = (PListeExpPrime)nodeArrayList2.get(0);

        plisteexpNode1 = new AListeExp(pexpNode2, plisteexpprimeNode3);
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AVideListeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExp plisteexpNode1;
        {
            // Block

        plisteexpNode1 = new AVideListeExp();
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AListeExpPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpPrime plisteexpprimeNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExp pexpNode3;
        PListeExpPrime plisteexpprimeNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plisteexpprimeNode4 = (PListeExpPrime)nodeArrayList3.get(0);

        plisteexpprimeNode1 = new AListeExpPrime(tvirguleNode2, pexpNode3, plisteexpprimeNode4);
        }
	nodeList.add(plisteexpprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVideListeExpPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExpPrime plisteexpprimeNode1;
        {
            // Block

        plisteexpprimeNode1 = new AVideListeExpPrime();
        }
	nodeList.add(plisteexpprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, touNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExp1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpNode1 = new AExp1Exp(pexp1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AEtExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TEt tetNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new AEtExp1(pexp1Node2, tetNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp2Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEgalExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TEgal tegalNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AEgalExp2(pexp2Node2, tegalNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AInfExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TInf tinfNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AInfExp2(pexp2Node2, tinfNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce APlusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new APlusExp3(pexp3Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMoinsExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TMoins tmoinsNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new AMoinsExp3(pexp3Node2, tmoinsNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExp4Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp4Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMultExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TMult tmultNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new AMultExp4(pexp4Node2, tmultNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ADivExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TDiv tdivNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new ADivExp4(pexp4Node2, tdivNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ANonExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TExclamation texclamationNode2;
        PExp5 pexp5Node3;
        texclamationNode2 = (TExclamation)nodeArrayList1.get(0);
        pexp5Node3 = (PExp5)nodeArrayList2.get(0);

        pexp5Node1 = new ANonExp5(texclamationNode2, pexp5Node3);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExp6Exp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);

        pexp5Node1 = new AExp6Exp5(pexp6Node2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce APowerExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PExp6 pexp6Node2;
        TPower tpowerNode3;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);
        tpowerNode3 = (TPower)nodeArrayList2.get(0);

        pexp6Node1 = new APowerExp6(pexp6Node2, tpowerNode3);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExp7Exp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PExp7 pexp7Node2;
        pexp7Node2 = (PExp7)nodeArrayList1.get(0);

        pexp6Node1 = new AExp7Exp6(pexp7Node2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AEntreParanthesesExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TParentheseGauche tparenthesegaucheNode2;
        PExp pexpNode3;
        TParentheseDroite tparenthesedroiteNode4;
        tparenthesegaucheNode2 = (TParentheseGauche)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParentheseDroite)nodeArrayList3.get(0);

        pexp7Node1 = new AEntreParanthesesExp7(tparenthesegaucheNode2, pexpNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANombreExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexp7Node1 = new ANombreExp7(tnombreNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVraiExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexp7Node1 = new AVraiExp7(tvraiNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AFauxExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexp7Node1 = new AFauxExp7(tfauxNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAppelFonctionExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TIdentif tidentifNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PListeExp plisteexpNode4;
        TParentheseDroite tparenthesedroiteNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        plisteexpNode4 = (PListeExp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);

        pexp7Node1 = new AAppelFonctionExp7(tidentifNode2, tparenthesegaucheNode3, plisteexpNode4, tparenthesedroiteNode5);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ALireExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TLire tlireNode2;
        TParentheseGauche tparenthesegaucheNode3;
        TParentheseDroite tparenthesedroiteNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParentheseDroite)nodeArrayList3.get(0);

        pexp7Node1 = new ALireExp7(tlireNode2, tparenthesegaucheNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AVariableExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp7Node1 = new AVariableExp7(pvarNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 7}, {24, SHIFT, 1}, {25, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 3}, {2, SHIFT, 9}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 7}, {24, SHIFT, 1}, {25, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, ERROR, 8}, {31, SHIFT, 14}, },
			{{-1, ERROR, 9}, {3, SHIFT, 15}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, ERROR, 10}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {24, SHIFT, 1}, {25, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 13}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 21}, {2, SHIFT, 22}, },
			{{-1, ERROR, 15}, {4, SHIFT, 23}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, ERROR, 17}, {31, SHIFT, 27}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {2, SHIFT, 22}, },
			{{-1, ERROR, 21}, {30, SHIFT, 29}, },
			{{-1, ERROR, 22}, {3, SHIFT, 30}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, REDUCE, 20}, {6, SHIFT, 32}, {9, SHIFT, 33}, {10, SHIFT, 34}, {11, SHIFT, 35}, {12, SHIFT, 36}, {31, SHIFT, 37}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 26}, {3, SHIFT, 42}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 29}, {1, SHIFT, 43}, },
			{{-1, ERROR, 30}, {4, SHIFT, 23}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, ERROR, 32}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 33}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 34}, {4, SHIFT, 23}, },
			{{-1, ERROR, 35}, {2, SHIFT, 65}, },
			{{-1, ERROR, 36}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 67}, {2, SHIFT, 68}, },
			{{-1, ERROR, 38}, {5, SHIFT, 69}, },
			{{-1, REDUCE, 20}, {6, SHIFT, 32}, {9, SHIFT, 33}, {10, SHIFT, 34}, {11, SHIFT, 35}, {12, SHIFT, 36}, {31, SHIFT, 37}, },
			{{-1, ERROR, 40}, {16, SHIFT, 71}, },
			{{-1, ERROR, 41}, {4, SHIFT, 23}, },
			{{-1, ERROR, 42}, {4, SHIFT, 23}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 46}, {3, SHIFT, 76}, },
			{{-1, ERROR, 47}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 48}, {2, SHIFT, 78}, },
			{{-1, ERROR, 49}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 67}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 55}, {8, SHIFT, 81}, {14, SHIFT, 82}, },
			{{-1, REDUCE, 36}, {15, SHIFT, 83}, },
			{{-1, REDUCE, 38}, {16, SHIFT, 84}, {17, SHIFT, 85}, },
			{{-1, REDUCE, 41}, {18, SHIFT, 86}, {19, SHIFT, 87}, },
			{{-1, REDUCE, 44}, {20, SHIFT, 88}, {22, SHIFT, 89}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 49}, {21, SHIFT, 90}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 63}, {10, SHIFT, 91}, {14, SHIFT, 82}, },
			{{-1, ERROR, 64}, {9, SHIFT, 92}, },
			{{-1, ERROR, 65}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 66}, {14, SHIFT, 82}, {29, SHIFT, 94}, },
			{{-1, ERROR, 67}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 71}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 75}, {4, SHIFT, 23}, },
			{{-1, ERROR, 76}, {4, SHIFT, 23}, {24, SHIFT, 1}, {25, SHIFT, 2}, },
			{{-1, ERROR, 77}, {3, SHIFT, 103}, {14, SHIFT, 82}, },
			{{-1, ERROR, 78}, {3, SHIFT, 104}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 81}, {4, SHIFT, 23}, },
			{{-1, ERROR, 82}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 83}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 84}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 85}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 86}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 87}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 88}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 89}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 91}, {4, SHIFT, 23}, },
			{{-1, ERROR, 92}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 93}, {3, SHIFT, 117}, {14, SHIFT, 82}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 95}, {1, SHIFT, 118}, {14, SHIFT, 82}, },
			{{-1, ERROR, 96}, {3, SHIFT, 119}, },
			{{-1, REDUCE, 34}, {14, SHIFT, 82}, {28, SHIFT, 120}, },
			{{-1, ERROR, 98}, {14, SHIFT, 82}, {29, SHIFT, 122}, },
			{{-1, ERROR, 99}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 3}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 105}, {3, SHIFT, 125}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 126}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 83}, },
			{{-1, REDUCE, 37}, {16, SHIFT, 84}, {17, SHIFT, 85}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 86}, {19, SHIFT, 87}, },
			{{-1, REDUCE, 40}, {18, SHIFT, 86}, {19, SHIFT, 87}, },
			{{-1, REDUCE, 42}, {20, SHIFT, 88}, {22, SHIFT, 89}, },
			{{-1, REDUCE, 43}, {20, SHIFT, 88}, {22, SHIFT, 89}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 28}, {14, SHIFT, 82}, },
			{{-1, ERROR, 117}, {29, SHIFT, 127}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 119}, {29, SHIFT, 128}, },
			{{-1, ERROR, 120}, {2, SHIFT, 47}, {13, SHIFT, 48}, {23, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 124}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 126}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 34}, {14, SHIFT, 82}, {28, SHIFT, 120}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 33}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 11}, {16, 26}, {18, 28}, {24, 41}, {31, 46}, {44, 75}, {73, 99}, {101, 124}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 24}, {22, 31}, {30, 44}, {42, 73}, {76, 101}, },
			{{-1, 6}, {7, 12}, {11, 19}, },
			{{-1, 7}, },
			{{-1, 17}, {0, 8}, {7, 13}, {11, 13}, },
			{{-1, 25}, {30, 45}, {34, 64}, {41, 72}, {42, 74}, {75, 100}, {76, 102}, {81, 106}, {91, 115}, {99, 123}, {124, 130}, {126, 131}, },
			{{-1, 38}, {39, 70}, },
			{{-1, 39}, },
			{{-1, 54}, {23, 40}, {39, 40}, },
			{{-1, 96}, {80, 105}, },
			{{-1, 121}, {129, 132}, },
			{{-1, 97}, {32, 55}, {33, 63}, {36, 66}, {47, 77}, {65, 93}, {67, 95}, {71, 98}, {92, 116}, {120, 129}, },
			{{-1, 56}, {82, 107}, },
			{{-1, 57}, {83, 108}, },
			{{-1, 58}, {84, 109}, {85, 110}, },
			{{-1, 59}, {86, 111}, {87, 112}, },
			{{-1, 60}, {49, 79}, {88, 113}, {89, 114}, },
			{{-1, 61}, },
			{{-1, 62}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'bool', 'entier', identif, EOF",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: 'bool', 'entier', ',', identif, EOF",
			"expecting: ')', 'bool', 'entier'",
			"expecting: 'bool', 'entier'",
			"expecting: '[', '(', 'bool', 'entier', ',', identif, EOF",
			"expecting: '{', 'bool', 'entier'",
			"expecting: ')', ','",
			"expecting: ')', '{', 'bool', 'entier', ',', identif, EOF",
			"expecting: nombre",
			"expecting: '}', 'si', 'tantque', 'faire', 'ecrire', 'retour', identif",
			"expecting: '{', ','",
			"expecting: ')'",
			"expecting: '[', ')', '{', 'bool', 'entier', ',', identif, EOF",
			"expecting: ')', '{', 'bool', 'entier', identif, EOF",
			"expecting: ']'",
			"expecting: '(', 'lire', '!', 'vrai', 'faux', nombre, identif",
			"expecting: '{'",
			"expecting: '[', '(', '='",
			"expecting: '}'",
			"expecting: '='",
			"expecting: ']', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', '=', '<', '+', '-', '*', '**', '/', ',', ';', identif",
			"expecting: '[', ']', '(', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', '=', '<', '+', '-', '*', '**', '/', ',', ';', identif",
			"expecting: 'alors', '|'",
			"expecting: ']', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', ',', ';', identif",
			"expecting: ']', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', '=', '<', ',', ';', identif",
			"expecting: ']', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', '=', '<', '+', '-', ',', ';', identif",
			"expecting: ']', ')', '}', 'si', 'alors', 'tantque', 'faire', 'ecrire', 'retour', '|', '&', '=', '<', '+', '-', '*', '/', ',', ';', identif",
			"expecting: 'faire', '|'",
			"expecting: 'tantque'",
			"expecting: '|', ';'",
			"expecting: '(', ')', 'lire', '!', 'vrai', 'faux', nombre, identif",
			"expecting: '}', 'si', 'sinon', 'tantque', 'faire', 'ecrire', 'retour', 'bool', 'entier', identif, EOF",
			"expecting: ')', '|'",
			"expecting: ']', '|'",
			"expecting: ')', '|', ','",
			"expecting: '}', 'si', 'sinon', 'tantque', 'faire', 'ecrire', 'retour', identif",
			"expecting: '}', 'si', 'tantque', 'faire', 'ecrire', 'retour', '|', identif",
			"expecting: ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 3, 0, 1, 5, 6, 0, 3, 1, 7, 8, 9, 1, 10, 3, 2, 11, 5, 12, 13, 0, 14, 15, 16, 17, 8, 9, 18, 18, 19, 2, 18, 20, 21, 12, 22, 19, 8, 10, 13, 0, 14, 18, 2, 18, 23, 23, 23, 24, 23, 25, 26, 27, 28, 29, 29, 23, 23, 30, 31, 18, 32, 18, 33, 34, 21, 18, 0, 13, 0, 19, 8, 35, 14, 29, 33, 19, 18, 18, 18, 18, 18, 18, 18, 18, 23, 19, 18, 35, 12, 36, 14, 37, 32, 19, 0, 13, 0, 23, 23, 14, 38, 26, 27, 28, 28, 29, 29, 29, 29, 12, 39, 40, 23, 40, 18, 14, 12, 0, 19, 23, 19, 12, 12, 37, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
